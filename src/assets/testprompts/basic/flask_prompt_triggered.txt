# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     https://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import datetime
import os
import sys
from app import models
from app.token import generate_confirmation_token, confirm_token
from app.email import send_email
from sqlalchemy import asc, desc
from flask import Blueprint, redirect, url_for, current_app, request,\
                  flash, render_template, g, session, send_from_directory,\
                  jsonify
from config import SECRET_KEY
from app.models import Item, User, Photo, db
from app.forms import ContactInfoForm, ItemInfoForm, LoginForm, NewUserForm,\
                  AboutUserForm, ListingPhotosForm
from app.login_manager import lm
from flask_login import login_required, login_user, logout_user, current_user
from flask_mail import Message
from werkzeug import secure_filename

auth = Blueprint('auth', __name__)

@auth.route('/verify/<token>')
@login_required
def verify_email(token):
    try:
        email = confirm_token(token)
    except:
        flash('The confirmation link is invalid or has expired.', 'danger')
    user = User.query.filter_by(email=email).first_or_404()
    if user.is_verified:
        flash('Account is already confirmed. Please login.', 'success')
    else:
        user.is_verified = True
        user.verified_on = datetime.datetime.now()
        db.session.add(user)
        db.session.commit()
        flash('Thanks for verifying your account with EggZlist!', 'success')
    return redirect(url_for('.profile', username = user.username)) 

@auth.route('/resend')
@login_required
def resend_verification():
    td = datetime.datetime.now() - g.user.sent_verification_on
    if g.user.sent_verification_on is None or \
       td > datetime.timedelta(seconds=3600):
        token = generate_confirmation_token(g.user.email)
        verify_url = url_for('auth.verify_email', token=token, _external=True)
        html = render_template('auth/verify_email.html', verify_url=verify_url)
        subject = "EggZlist - Please verify your email"
        send_email(g.user.email, subject, html)
        flash('A new verification email has been sent.', 'success')
        g.user.sent_verification_on = datetime.datetime.now()
        db.session.add(g.user)
        db.session.commit()
    else:
        flash("Verification email already sent. Please wait a few minutes \
        before requesting another.")
    return redirect(url_for('.profile', username = g.user.username))

@auth.route('/uploads/<filename>')
def uploads(filename):
+++++++++++++++++++++++++

    return send_